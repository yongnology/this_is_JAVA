----------------------------------------------
chapter 02 변수와 타입
----------------------------------------------

2.1 변수

변수란
- 하나의 값을 저장할 수 있는 메모리 공가닝다.
- 변수의 첫 번째 글자는 문자이거나 $ _ 이어야 하며
  숫자로 시작할 수 없다.
- 선언된 블록 내에서만 사용이 가능하다.

----------------------------------------------

2.2 데이터 타입

정수 타입 : byte, char, shortm int, long
실수 타입 : float, double
논리 타입 : boolean

자바는 기본적으로 정수 연산을 int 타입으로 실행한다.

String
- 클래스 타입이고, String 변수는 참조 변수이다.
- 문자열 String 변수에 대입하면 String 객체가 생성되고,
  String 변수는 String 객체의 번지를 참조하게 된다.

----------------------------------------------

2.3 타입 변환

■ 타입 변환
데이터 타입을 다른 데이터 타입으로 변환하는 것을 말한다.

■ 자동 타입 변환
  : 프로그램 실행 도중에 작은 타입은 큰 타입으로 자동 타입 변환된다.

■ 강제 타입 변환(캐스팅 : Casting)
  : 큰 타입을 작은 타입 단위로 쪼개고 끝 한부분만 작은 타입으로 강제적 변환한다.
	ex) 작은 크기 타입 = (작은크기타입) 큰 크기 타입
	ex)
	long longValue = 300;
	int intValue = (int)long Value;	// 정상 저장이 된다.

■ 연산식에서 자동 타입 변환
  : 연산은 같은 타입의 피연산자(operand)간에만 수행한다.
	- 서로 다른 타입의 피연산자는 같은 타입으로 변환됨.
	- 두 피연산자 중 크기가 큰 타입으로 자동 변환

----------------------------------------------
chapter 03 연산자
----------------------------------------------

3.1 연산자와 연산식

연산
- 데이터를 처리하여 결과를 산출하는 것
- 연산자(Operations) : 연산에 사용되는 표시나 기호
- 피연산자(Operand) : 연산 대상이 되는 데이터(리터럴, 변수)
- 연산식(Expression) : 연산자와 피연산자를 이용하여 연산의 과정을 기술한 것

----------------------------------------------

3.2 연산의 방향과 우선순위

■ 우선 순위 정리
1. 단항, 이항, 삼항 연산자 순으로 우선순위를 가진다.
2. 산술, 비교, 논리, 대입 여산자 순으로 우선순위를 가진다.
3. 단항과 대입 연산자르 제외한 모든 연산자의 방향은 왼쪽에서 오른쪽이다.
4. 복잡한 연산식에는 괄호()사용해서 우선순위를 정해준다.

----------------------------------------------

3.3 단항 연산자

■ 단항 연산자
  : 피연산자가 1개인 연산자
- 종류
	- 부호 연산자 : ++
	- 증감 연산자 : ++, --
	- 부정 연산자 : !
	- 비트 반전 연산자 : ~

----------------------------------------------

3.4 이항 연산자

■ 이항 연산자
  : 피연산자가 2개인 연산자
- 종류
	- 산술 연산자 : +, - *, /, %
	- 문자열 연결 연산자 : +
	- 대입 연산자 : =, +=, -=, *=, /=, %=, &=, ^=, |=, <<=, >>=, >>>=
	- 비교 연산자 : <, <=, >, >=, ==, !=
	- 논리 연산자 : &&, ||, &, |, ^, !
	
	■ 비트 연산자
	: 비트(bit)단위로 연산을 한다. 즉 0과 1이 피연산자가 된다.
	- 비트 논리 연산자 : &, |, ^
	- 비트 이동 연산자 : <<, >>, >>>

- 오버플로우
  : 산술 연산을 할 때에는 산출값이 산출 타입으로 충분히 표현 가능한지 살펴봐야 한다.

- 정확한 계산은 정수를 사용한다.

- String 타입의 문자열을 비교할 때에는 대소 연산자를 사용할 수 없다.
- 문자열 비교는  equals() 메소드를 사용해야 한다.

----------------------------------------------

3.5 삼항 연산자

조건 연산식( ()? : )
	조건식	 ? 	값 또는 연산식	:	값 또는 연산식
	(피연산자1) 	(피연산자2)		 (피연산자3)

----------------------------------------------
chapter 04 조건문과 반복문
----------------------------------------------

4.1 코드 실행 제어

■ 정상적인 코드 실행 흐름
  : main() 메소드의 시작 중괄호 {에서 끝 중괄호 }까지
    위에서 아래 방향으로 실행

■ 제어문의 역할
  : 정상적인 코드 실행 흐름을 개발자가 원하는 방향으로 변경할 수 있도록 한다.

■ 제어문의 종류
	1) 조건문 : if문, switch문
	2) 반복문	: for문, while문, do-while문
	3) break문, continue문

----------------------------------------------

4.2 조건문(if문, switch문)

■ if문
  : 조건식의 결과에 따라 중괄호 {} 블록을 실행할지 여부를 결정할 때 사용

■ if-else문
  : 조건식의 결과에 다라 실행 블록을 선택한다.

■ if-else if-else문
  : 복수의 조건식을 두어 조건식을 만족하는 블록만 실행한다.

■ 중첩 if문
  : if문의 블록 내부에는 또 다른 if문을 사용할 수 있다.

■ switch문
  : 변수나 연산식의 값에 따라 실행문을 선택할 때 사용한다.

----------------------------------------------

4.3 반복문(for문, while문, do-while문)

■ 반복문
  : 중괄호 블록 내용을 반복적으로 실행할 때 사용한다.

- for 문 : 반복 횟수를 알고 있을 때 주로 사용

- while 문 : 조건에 따라 반복을 계속할지를 결정할 때 사용

- do-while문 : 블록 내부의 실행문을 우선 실행하고
  실행 결과에 따라서 반복 실행을 계속할지 결정하는 경우에 사용

- break 문 : for문, whiel문, do-while문을 종료한다.(반복을 취소한다.)
	: switch문을 종료한다.

- continue문 : for문 while문, do-while문에서 사용한다.

----------------------------------------------
chapter 05 참조 타입
----------------------------------------------

5.1 데이터 타입 분류

자바의 데이터 타입에는 크게

1. 기본타입(원시 타입 : primitive type)
	: 정수, 실수, 문자, 논리 리터럴을 정하는 타입.
2. 참조타입(reference type) 
	: 객체(Object)으 ㅣ번지를 참조하는 타입으로
	  배열, 열거, 클래스, 인터페이스 타입.

으로 분류된다.

※ 참조타입은 메모리의 번지를 값으로 갖는다.
  : 번지를 통해 객체를 참조한다는 뜻에서 참조타입이라고 부른다.

비고.
int와 double 변수는 직접 값을 저장하고 있지만,
String 클래스 변수는 힙 영역의 String 객체 주소 값을 가지고 있다.

----------------------------------------------

5.2 메모리 사용 영역

JVM은 OS에서 할당받은 몌모리 영역(Runtime Data Area)을 세 영역으로 구분한다.
- 메소드 영역 : 클래스 코드들이 있다.
- 힙 영역 : 객체가 생성된다.
- JVM 스택 : 변수들이 생성된다.

■ 메소드 영역
	- JVM을 시작할 때 생성
	- 로딩된 클래스 바이트 코드 내용을 분석후 저장
	- 모든 스레드가 공유
■ 힙 영역
	- JVM을 시작할 때 생성
	- 객체/배열 저장
	- 사용되지 않는 객체는 쓰레기 수집기(Garbage Collector)가 자동 제거

■ JVM 스택
	- 스레드별로 생성
	- 메소드를 호출할 때마다 Frame을 스택에 추가(push)
	- 메소드가 종료하면 Frame을 제거(pop)

----------------------------------------------